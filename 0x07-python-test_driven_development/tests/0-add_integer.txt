The ''0-add_integer'' module
==========================

Using ''add_integer''
-------------

Import function:
	>>> add = __import__('0-add_integer').add_integer

Test Basic:
	>>> add(5, 5)
	10

Test 1st arg negative int:
	>>> add(-5, 10)
	5

Test 2nd arg negative int:
	>>> add(10, -5)
	5

Test both args negative:
	>>> add(-5, -5)
	-10

Test 1st arg float:
	>>> add(5.5, 5)
	10

Test 2nd arg float:
	>>> add(5, 5.5)
	10

Test both floats:
	>>> add(5.5, 5.5)
	10

Test negative with float:
	>>> add(-5, 10.5)
	5

Test one input:
	>>> add(5)
	103

Test default 2nd arg:
	>>> add(0)
	98

Test 2nd arg string:
	>>> add(5, "Hi")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Test 1st arg string:
	>>> add("Hi", 5)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Test both strings:
	>>> add("Hi", "Biba")
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Test 'None':
	>>> add(None)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Test 1st argument is a list:
	>>> add([1, 2, 3], 1)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Test 2nd arg is a list:
	>>> add(1, [1, 2, 3])
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Test one float:
    >>> add(5.9)
    103

Test one negative float:
    >>> add(-5.9)
    93

Test two big integers:
    >>> add(9999999999, 9999999999)
    19999999998

Test infinity:
    >>> add(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	...
    OverflowError: cannot convert float infinity to integer

Test nan:
    >>> add(0, float('nan'))
    Traceback (most recent call last):
    	...
    ValueError: cannot convert float NaN to integer

Test both args invalid:
    >>> add(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer
