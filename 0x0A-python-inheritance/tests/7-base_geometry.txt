The ''7-base_geometry'' module
============================

Using ''BaseGeometry''
---------------------

Import function from module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Correct Class Type test:
    >>> base = BaseGeometry()
    >>> type(base) == BaseGeometry
    True


area() Public instance method
----------------------
Test instantiation :area method is an instance method:
    >>> type(BaseGeometry.__dict__['area'])
    <class 'function'>

area method called via class with no args:
    >>> base.__class__.area()
    Traceback (most recent call last):
    TypeError: area() missing 1 required positional argument: 'self'

Test: area method (1 arg):
    >>> base.area(1)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given

Test area():
    >>> base.area()
    Traceback (most recent call last):
    Exception: area() is not implemented


integer_validator() Public instance method
-----------------------------------
Test instantiation: integer_validator is an instance method:
    >>> type(BaseGeometry.__dict__['integer_validator'])
    <class 'function'>

Test: integer_validator method called via class with no args:
    >>> base.__class__.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

Test: integer_validator method arg test (0 args):
    >>> base.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
    
Test: integer_validator method arg test (3 args):
    >>> base.integer_validator(5, 5, 5)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

Test: integer_validator method float.0 value:
    >>> base.integer_validator("habiba", 5.0)
    Traceback (most recent call last):
    TypeError: habiba must be an integer

Test integer_validator method float.x value:
    >>> base.integer_validator("habiba", 3.14)
    Traceback (most recent call last):
    TypeError: habiba must be an integer

integer_validator method string value:
    >>> base.integer_validator("habiba", "habiba")
    Traceback (most recent call last):
    TypeError: habiba must be an integer

Test: integer_validator method list value:
    >>> base.integer_validator("habiba", [1])
    Traceback (most recent call last):
    TypeError: habiba must be an integer

Test:integer_validator method None value:
    >>> base.integer_validator("habiba", None)
    Traceback (most recent call last):
    TypeError: habiba must be an integer

Test: integer_validator method 0 value:
    >>> base.integer_validator("name", 0)
    Traceback (most recent call last):
    ValueError: name must be greater than 0

Test: integer_validator method negative value:
    >>> base.integer_validator("name", -1000)
    Traceback (most recent call last):
    ValueError: name must be greater than 0

Test:integer_validator method ok value:
    >>> base.integer_validator("key", 98)
    
Test: integer_validator method ok value 2:
    >>> base.integer_validator("key", 1)

Test:integer_validator method empty string:
    >>> base.integer_validator("", 1)

Test: integer_validator method empty string:
    >>> base.integer_validator(None, 1)

Test: integer_validator method tuple:
    >>> base.integer_validator("habiba", (1, 2))
    Traceback (most recent call last):
    TypeError: habiba must be an integer

Test:integer_validator method dic:
    >>> base.integer_validator("habiba", {1, 2})
    Traceback (most recent call last):
    TypeError: habiba must be an integer
